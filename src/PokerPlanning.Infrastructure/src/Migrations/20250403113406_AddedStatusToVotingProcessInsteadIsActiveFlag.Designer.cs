// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PokerPlanning.Infrastructure.src.Persistence;

#nullable disable

namespace PokerPlanning.Infrastructure.Migrations
{
    [DbContext(typeof(PokerPlanningDbContext))]
    [Migration("20250403113406_AddedStatusToVotingProcessInsteadIsActiveFlag")]
    partial class AddedStatusToVotingProcessInsteadIsActiveFlag
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PokerPlanning.Domain.src.Models.GameAggregate.Entities.Participant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Online")
                        .HasColumnType("boolean");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("VoteId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.HasIndex("VoteId");

                    b.ToTable("Participants", (string)null);
                });

            modelBuilder.Entity("PokerPlanning.Domain.src.Models.GameAggregate.Entities.VotingResult", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TicketId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("TicketId");

                    b.ToTable("VotingResults", (string)null);
                });

            modelBuilder.Entity("PokerPlanning.Domain.src.Models.GameAggregate.Entities.VotingResultVote", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("VoteId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("VotingResultId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("VoteId");

                    b.HasIndex("VotingResultId");

                    b.ToTable("VotingResultVotes", (string)null);
                });

            modelBuilder.Entity("PokerPlanning.Domain.src.Models.GameAggregate.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TicketsSequenceNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid>("VotingSystemId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VotingSystemId");

                    b.ToTable("Games", (string)null);
                });

            modelBuilder.Entity("PokerPlanning.Domain.src.Models.TicketAggregate.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("");

                    b.Property<string>("Estimation")
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("GameId")
                        .HasColumnType("uuid");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Link")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Type")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Tickets", (string)null);
                });

            modelBuilder.Entity("PokerPlanning.Domain.src.Models.UserAggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<int>("Role");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("PokerPlanning.Domain.src.Models.VotingSystemAggregate.Entities.VotingSystemVote", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Order")
                        .HasColumnType("decimal");

                    b.Property<string>("Suit")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("VotingSystemId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VotingSystemId");

                    b.ToTable("VotingSystemVotes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bf0d4051-84a7-4162-8f48-580d4e488df2"),
                            Order = 0m,
                            Suit = "🏖️",
                            Value = "0",
                            VotingSystemId = new Guid("6a113d25-34c9-4b49-985c-2df6dd67650c")
                        },
                        new
                        {
                            Id = new Guid("5addfe74-4e6d-4dde-8c1b-01b856a57b2a"),
                            Order = 1m,
                            Suit = "⚡",
                            Value = "1",
                            VotingSystemId = new Guid("6a113d25-34c9-4b49-985c-2df6dd67650c")
                        },
                        new
                        {
                            Id = new Guid("f1f6b021-7f60-4b21-b297-6be2b93f0cb9"),
                            Order = 2m,
                            Suit = "🚀",
                            Value = "2",
                            VotingSystemId = new Guid("6a113d25-34c9-4b49-985c-2df6dd67650c")
                        },
                        new
                        {
                            Id = new Guid("a05dcc39-4781-4407-9255-94d8cc847657"),
                            Order = 3m,
                            Suit = "🤔",
                            Value = "3",
                            VotingSystemId = new Guid("6a113d25-34c9-4b49-985c-2df6dd67650c")
                        },
                        new
                        {
                            Id = new Guid("9875f3f1-cbb0-40ee-b649-de48b706b7ba"),
                            Order = 4m,
                            Suit = "😬",
                            Value = "5",
                            VotingSystemId = new Guid("6a113d25-34c9-4b49-985c-2df6dd67650c")
                        },
                        new
                        {
                            Id = new Guid("8d23dd52-a81e-41b5-a9ac-2df12cd6d667"),
                            Order = 5m,
                            Suit = "😵",
                            Value = "8",
                            VotingSystemId = new Guid("6a113d25-34c9-4b49-985c-2df6dd67650c")
                        },
                        new
                        {
                            Id = new Guid("07746553-c20a-4337-9fea-d37d9a473e78"),
                            Order = 6m,
                            Suit = "☠️",
                            Value = "13",
                            VotingSystemId = new Guid("6a113d25-34c9-4b49-985c-2df6dd67650c")
                        },
                        new
                        {
                            Id = new Guid("2c60634e-02ae-4b06-9894-c4f928d3037b"),
                            Order = 7m,
                            Suit = "🤡",
                            Value = "?",
                            VotingSystemId = new Guid("6a113d25-34c9-4b49-985c-2df6dd67650c")
                        },
                        new
                        {
                            Id = new Guid("66de38f8-1e99-4e39-9eef-ceeff15dd938"),
                            Order = 0m,
                            Suit = "🏖️",
                            Value = "xss",
                            VotingSystemId = new Guid("8eccd01f-53e5-4e6f-8553-64c81448a480")
                        },
                        new
                        {
                            Id = new Guid("c5a7d8f5-432a-447a-81f6-9870e07e237a"),
                            Order = 1m,
                            Suit = "⚡",
                            Value = "xs",
                            VotingSystemId = new Guid("8eccd01f-53e5-4e6f-8553-64c81448a480")
                        },
                        new
                        {
                            Id = new Guid("46d6301b-4fc9-4e78-a797-891592197821"),
                            Order = 2m,
                            Suit = "🚀",
                            Value = "s",
                            VotingSystemId = new Guid("8eccd01f-53e5-4e6f-8553-64c81448a480")
                        },
                        new
                        {
                            Id = new Guid("3c25140f-c8fb-409f-b54d-04835c143319"),
                            Order = 3m,
                            Suit = "🤔",
                            Value = "m",
                            VotingSystemId = new Guid("8eccd01f-53e5-4e6f-8553-64c81448a480")
                        },
                        new
                        {
                            Id = new Guid("ee166192-1c6d-4e8a-81d2-b111a0ec0a6b"),
                            Order = 4m,
                            Suit = "😬",
                            Value = "l",
                            VotingSystemId = new Guid("8eccd01f-53e5-4e6f-8553-64c81448a480")
                        },
                        new
                        {
                            Id = new Guid("46c84b9b-a443-4ac3-8550-02d63c57c6d7"),
                            Order = 5m,
                            Suit = "😵",
                            Value = "xl",
                            VotingSystemId = new Guid("8eccd01f-53e5-4e6f-8553-64c81448a480")
                        },
                        new
                        {
                            Id = new Guid("0bc7aa91-6a87-4386-994d-105fb13b6d98"),
                            Order = 6m,
                            Suit = "☠️",
                            Value = "xxl",
                            VotingSystemId = new Guid("8eccd01f-53e5-4e6f-8553-64c81448a480")
                        },
                        new
                        {
                            Id = new Guid("28e4cc55-2acf-4138-b781-8ae4da22582a"),
                            Order = 7m,
                            Suit = "🤡",
                            Value = "?",
                            VotingSystemId = new Guid("8eccd01f-53e5-4e6f-8553-64c81448a480")
                        });
                });

            modelBuilder.Entity("PokerPlanning.Domain.src.Models.VotingSystemAggregate.VotingSystem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("VotingSystems", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6a113d25-34c9-4b49-985c-2df6dd67650c"),
                            Name = "Fibonacci"
                        },
                        new
                        {
                            Id = new Guid("8eccd01f-53e5-4e6f-8553-64c81448a480"),
                            Name = "T-shirts"
                        });
                });

            modelBuilder.Entity("PokerPlanning.Infrastructure.src.Authentication.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PokerPlanning.Infrastructure.src.Authentication.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("91c050e7-0576-4961-8753-75a39473bcc0"),
                            Name = "Guest"
                        },
                        new
                        {
                            Id = new Guid("6cbc5b47-1527-4259-b8d0-e6c0d0513c3b"),
                            Name = "Member"
                        },
                        new
                        {
                            Id = new Guid("eca7a853-d704-4545-a31c-67a78e88d599"),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("PokerPlanning.Domain.src.Models.UserAggregate.GuestUserAggregate.GuestUser", b =>
                {
                    b.HasBaseType("PokerPlanning.Domain.src.Models.UserAggregate.User");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("PokerPlanning.Domain.src.Models.UserAggregate.MemberUserAggregate.MemberUser", b =>
                {
                    b.HasBaseType("PokerPlanning.Domain.src.Models.UserAggregate.User");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("PokerPlanning.Infrastructure.src.Authentication.ApplicationUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("PokerPlanning.Infrastructure.src.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("PokerPlanning.Infrastructure.src.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("PokerPlanning.Infrastructure.src.Authentication.ApplicationUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokerPlanning.Infrastructure.src.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("PokerPlanning.Infrastructure.src.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PokerPlanning.Domain.src.Models.GameAggregate.Entities.Participant", b =>
                {
                    b.HasOne("PokerPlanning.Domain.src.Models.GameAggregate.Game", "Game")
                        .WithMany("Participants")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokerPlanning.Domain.src.Models.UserAggregate.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("PokerPlanning.Domain.src.Models.VotingSystemAggregate.Entities.VotingSystemVote", "Vote")
                        .WithMany()
                        .HasForeignKey("VoteId");

                    b.Navigation("Game");

                    b.Navigation("User");

                    b.Navigation("Vote");
                });

            modelBuilder.Entity("PokerPlanning.Domain.src.Models.GameAggregate.Entities.VotingResult", b =>
                {
                    b.HasOne("PokerPlanning.Domain.src.Models.GameAggregate.Game", "Game")
                        .WithMany("VotingResults")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokerPlanning.Domain.src.Models.TicketAggregate.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId");

                    b.Navigation("Game");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("PokerPlanning.Domain.src.Models.GameAggregate.Entities.VotingResultVote", b =>
                {
                    b.HasOne("PokerPlanning.Domain.src.Models.GameAggregate.Entities.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokerPlanning.Domain.src.Models.VotingSystemAggregate.Entities.VotingSystemVote", "Vote")
                        .WithMany()
                        .HasForeignKey("VoteId");

                    b.HasOne("PokerPlanning.Domain.src.Models.GameAggregate.Entities.VotingResult", null)
                        .WithMany("Votes")
                        .HasForeignKey("VotingResultId");

                    b.Navigation("Participant");

                    b.Navigation("Vote");
                });

            modelBuilder.Entity("PokerPlanning.Domain.src.Models.GameAggregate.Game", b =>
                {
                    b.HasOne("PokerPlanning.Domain.src.Models.VotingSystemAggregate.VotingSystem", "VotingSystem")
                        .WithMany()
                        .HasForeignKey("VotingSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("PokerPlanning.Domain.src.Models.GameAggregate.Entities.GameSettings", "Settings", b1 =>
                        {
                            b1.Property<Guid>("GameId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("IsAutoRevealCards")
                                .HasColumnType("boolean");

                            b1.HasKey("GameId");

                            b1.ToTable("Games");

                            b1.WithOwner()
                                .HasForeignKey("GameId");
                        });

                    b.OwnsOne("PokerPlanning.Domain.src.Models.GameAggregate.Entities.VotingProcess", "VotingProcess", b1 =>
                        {
                            b1.Property<Guid>("GameId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Status")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(0);

                            b1.Property<Guid?>("TicketId")
                                .HasColumnType("uuid");

                            b1.HasKey("GameId");

                            b1.HasIndex("TicketId")
                                .IsUnique();

                            b1.ToTable("Games");

                            b1.WithOwner()
                                .HasForeignKey("GameId");

                            b1.HasOne("PokerPlanning.Domain.src.Models.TicketAggregate.Ticket", "Ticket")
                                .WithOne()
                                .HasForeignKey("PokerPlanning.Domain.src.Models.GameAggregate.Game.VotingProcess#PokerPlanning.Domain.src.Models.GameAggregate.Entities.VotingProcess", "TicketId");

                            b1.Navigation("Ticket");
                        });

                    b.Navigation("Settings")
                        .IsRequired();

                    b.Navigation("VotingProcess")
                        .IsRequired();

                    b.Navigation("VotingSystem");
                });

            modelBuilder.Entity("PokerPlanning.Domain.src.Models.TicketAggregate.Ticket", b =>
                {
                    b.HasOne("PokerPlanning.Domain.src.Models.GameAggregate.Game", "Game")
                        .WithMany("Tickets")
                        .HasForeignKey("GameId");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("PokerPlanning.Domain.src.Models.VotingSystemAggregate.Entities.VotingSystemVote", b =>
                {
                    b.HasOne("PokerPlanning.Domain.src.Models.VotingSystemAggregate.VotingSystem", null)
                        .WithMany("Votes")
                        .HasForeignKey("VotingSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PokerPlanning.Domain.src.Models.VotingSystemAggregate.VotingSystem", b =>
                {
                    b.HasOne("PokerPlanning.Domain.src.Models.UserAggregate.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("PokerPlanning.Infrastructure.src.Authentication.ApplicationUser", b =>
                {
                    b.HasOne("PokerPlanning.Infrastructure.src.Authentication.ApplicationUserRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokerPlanning.Domain.src.Models.UserAggregate.User", "User")
                        .WithOne()
                        .HasForeignKey("PokerPlanning.Infrastructure.src.Authentication.ApplicationUser", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PokerPlanning.Domain.src.Models.GameAggregate.Entities.VotingResult", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("PokerPlanning.Domain.src.Models.GameAggregate.Game", b =>
                {
                    b.Navigation("Participants");

                    b.Navigation("Tickets");

                    b.Navigation("VotingResults");
                });

            modelBuilder.Entity("PokerPlanning.Domain.src.Models.VotingSystemAggregate.VotingSystem", b =>
                {
                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
